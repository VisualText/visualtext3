/*******************************************************************************
Copyright (c) 1999-2010 by Text Analysis International, Inc.
All rights reserved.
*******************************************************************************/

// VisualTextView.h : interface of the CVisualTextView class
//
/////////////////////////////////////////////////////////////////////////////

#if !defined(AFX_VISUALTEXTVIEW_H__5078BC9E_EEA1_11D2_A2C4_00105A99059F__INCLUDED_)
#define AFX_VISUALTEXTVIEW_H__5078BC9E_EEA1_11D2_A2C4_00105A99059F__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

#include "undo.h"

//#define CViewBase	CView

enum CURSOR_LINE_TYPE {
	CURSOR_LINE_NORMAL = 0,
	CURSOR_LINE_BLANK,
	CURSOR_LINE_RULE_UNFORMATTED,
	CURSOR_LINE_RULE_FORMATTED_FIRST,
	CURSOR_LINE_RULE_FORMATTED_LAST,
	CURSOR_LINE_RULE_FORMATTED,
};

//class CVisualTextCntrItem;

class CVisualTextView : public CRichEditView
{
protected: // create from serialization only
	CVisualTextView();
	DECLARE_DYNCREATE(CVisualTextView)

	CString m_strText;
	CFont m_font;
	BOOL m_wordWrap;

// Attributes
public:
	CVisualTextDoc *GetDocument();

	void Initialize();
	void ClearFormat();

	void SetCaseSensitive(BOOL bSensitive);
	void SetChangeCase(BOOL bChange);

	void SetSLComment(TCHAR chComment, TCHAR chComment2 = 0);
	void SetSLComment(LPCTSTR lpszComment);
	void SetStringQuotes(LPCTSTR lpszStrQ);

	void AddKeywords(LPCTSTR lpszKwd);
	void AddConstants(LPCTSTR lpszKwd);
	void AddLargers(LPCTSTR lpszKwd);
	void ClearKeywords();
	void ClearConstants();
	void ClearLargers();

	void SetZoneColor(COLORREF clr, BOOL bBold);
	void SetAttributeColor(COLORREF clr, BOOL bBold);
	void SetConstantColor(COLORREF clr, BOOL bBold);
	void SetCommentColor(COLORREF clr, BOOL bBold);
	void SetNLPColor(COLORREF clr, BOOL bBold);
	void SetNodeColor(COLORREF clr, BOOL bBold);
	void SetStringColor(COLORREF clr, BOOL bBold);

	void SerializePublic(CArchive& ar);
	void SaveState();
	void Scroll(int lines);

	void ColorSelections(CString processTextStr, CStringList &selList);

	void SetIconType();

	bool GetSelTextTrim();	
	bool GetSelTextTrim(bool trimFlag, bool askFlag=true);	
	bool GetSelTextTrim(long &start, long &end, bool trimFlag=true, bool askFlag=true);

	void AdjustStartEnd(long &start, long &end, CString textPathStr=_T(""));
	void Mask();
	void WindowSizeFromTextSize(long width, long length, long &wOut, long &lOut);
	void AdjustDocSizeToText(CString fullFilePathStr);
	CString StateStr();
	bool IsSampleFile();
	bool IsAutoGenerated();

// Operations
public:
	void FormatAll();
	void FindForward();
	void FindBack();

// Overrides
	// ClassWizard generated virtual function overrides
	//{{AFX_VIRTUAL(CVisualTextView)
	public:
	virtual BOOL PreCreateWindow(CREATESTRUCT& cs);
	virtual BOOL PreTranslateMessage(MSG* pMsg);
	protected:
	virtual void OnInitialUpdate(); // called first time after construct
	virtual void OnPrint(CDC* pDC, CPrintInfo* pInfo);
	virtual long PrintPage(CDC* pDC, long nIndexStart, long nIndexStop);
	virtual BOOL OnPreparePrinting(CPrintInfo* pInfo);
	virtual BOOL PaginateTo(CDC* pDC, CPrintInfo* pInfo);
	virtual void OnPrepareDC(CDC* pDC, CPrintInfo* pInfo);
	//}}AFX_VIRTUAL

protected:
	virtual BOOL SameAsSelected(LPCTSTR lpszCompare, BOOL bCase, BOOL /*bWord*/);
	virtual void OnReplaceSel(CFindReplaceDialog *pDialog);
	virtual void OnReplaceAll(CFindReplaceDialog *pDialog);

// Implementation
public:
	virtual ~CVisualTextView();
#ifdef _DEBUG
	virtual void AssertValid() const;
	virtual void Dump(CDumpContext& dc) const;
#endif

public:
	CString EditGetText(void);
	CString EditGetSelText(void);

protected:
	BOOL IsStringQuote(TCHAR ch);
	int IsZone(LPCTSTR lpszSymbol);
	int IsNLPWord(LPCTSTR lpszSymbol);
	int IsNodeWord(LPCTSTR lpszSymbol);
	int IsConstant(LPCTSTR lpszSymbol);
	int IsAttribute(LPCTSTR lpszSymbol);

	BOOL GetSelFromCursor(int& selStart, int& selEnd);
	BOOL SetFormatRangeFont(int nStart, int nEnd);
	void SetFormatRange(int nStart, int nEnd, BOOL bBold, COLORREF clr);
	void FormatTextRange(int nStart, int nEnd);
	bool IsInWordList(_TCHAR *wordList[], CString wordStr, BOOL bCaseSensitive=true);
	void FormatTextLines(int nStart, int nEnd);
	void ChangeCase(int nStart, int nEnd, LPCTSTR lpszStr);
	void WhenChange();
	void DoForm();

	int LogFilePassNumberFromTitle(bool logFileFlag=false);
	CString RuleFileFromLog();

	struct SymbolColor {
		COLORREF clrColor;
		BOOL bBold;
	};

	enum ChangeType {ctUndo, ctUnknown, ctReplSel, ctDelete, ctBack, ctCut, ctPaste, ctMove};

	BOOL m_bCaseSensitive;
	BOOL m_bChangeCase;
	TCHAR m_chComment;
	TCHAR m_chComment2;

	SymbolColor m_icNLP;
	SymbolColor m_icNode;
	SymbolColor m_icZone;
	SymbolColor m_icAttribute;
	SymbolColor m_icConstant;
	SymbolColor m_icComment;
	SymbolColor m_icString;

	BOOL m_bInForcedChange;
	ChangeType m_changeType;
	CHARRANGE m_crOldSel;
	CHARRANGE m_crBefore; // SRP 2001-02-01
	BOOL m_bCursorAtEndOfDocument;

	CString m_strStringQuotes;
	CString m_strComment;
	CString m_strFontFaceName;
	long m_FontHeight;

// Generated message map functions
protected:
	//{{AFX_MSG(CVisualTextView)
	afx_msg void OnDestroy();
	afx_msg void OnRButtonDown(UINT nFlags, CPoint point);
	afx_msg void OnFileNewAnalyzer();
	afx_msg void OnFileNew();
	afx_msg void OnRulefileHighlightmatches();
	afx_msg void OnTextviewSelectandrun();
	afx_msg void OnTextDisplaytree();
	afx_msg void OnWordWrapToggle();
	afx_msg void OnTextViewoutput();
	afx_msg void OnTextViewentiretree();
	afx_msg void OnSamplemenuGeneratesamples();
	afx_msg void OnSamplemenuSort();
	afx_msg void OnMouseMove(UINT nFlags, CPoint point);
	afx_msg void OnTextSorttext();
	afx_msg void OnTextToolsHexviewer();
	afx_msg void OnTextToolsAsciitable();
	afx_msg void OnTextToolsTextfileinfo();
	afx_msg void OnTextToolsDictionaryLookup();
	afx_msg void OnTextToolsDictionize();
	afx_msg void OnTextToolsMask();
	afx_msg void OnToolsCharacterviewer();
	afx_msg void OnTextEmail();
	afx_msg void OnTextWraptext();
	afx_msg void OnChar(UINT nChar, UINT nRepCnt, UINT nFlags); // SRP 2001-02-01
	afx_msg void OnEditCut(); // SRP 2001-02-01
	afx_msg void OnEditCopy();
	afx_msg void OnEditPaste(); // SRP 2001-02-01
	afx_msg void OnEditClear(); // SRP 2001-02-01
	afx_msg void OnEditUndo(); // SRP 2001-02-01
	afx_msg void OnEditRedo(); // SRP 2001-04-19
	afx_msg void OnSetFocus(CWnd* pOldWnd);
	afx_msg void OnSaveAll();
	afx_msg void OnLogfileFindlocal();
	afx_msg void OnLogfileFindagain();
	afx_msg void OnRulefileInsertXnum();
	afx_msg void OnUpdateEditCut(CCmdUI* pCmdUI);
	afx_msg void OnUpdateEditCopy(CCmdUI* pCmdUI);
	afx_msg void OnUpdateEditPaste(CCmdUI* pCmdUI);
	afx_msg void OnUpdateEditClear(CCmdUI* pCmdUI);
	afx_msg void OnUpdateEditRedo(CCmdUI* pCmdUI);
	afx_msg void OnUpdateEditUndo(CCmdUI* pCmdUI);
	afx_msg void OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags);
	afx_msg void OnFilePrint();
	afx_msg void OnFilePrintPreview();
	afx_msg void OnRulefileHelponselection();
	afx_msg void OnLButtonDblClk(UINT nFlags, CPoint point);
	afx_msg int OnCreate(LPCREATESTRUCT lpCreateStruct);
	afx_msg void OnTextDictionaryKbattributes();
	afx_msg void OnTextDictionaryAddwords();
	afx_msg void OnTextToolsJumble();
	afx_msg void OnLButtonUp(UINT nFlags, CPoint point);
	afx_msg void OnFonts();
	afx_msg void OnLogfileViewrulefile();
	afx_msg void OnFindinfiles();
	afx_msg void OnLogfileFindinrulefile();

	//}}AFX_MSG
	afx_msg LRESULT OnFindReplaceCmd(WPARAM, LPARAM lParam);
	afx_msg void OnSampleViewAdd(UINT nStatus);
	afx_msg void OnSampleAdd(UINT nStatus);
	afx_msg void OnSampleGeneratesamples();
	afx_msg void OnSamplemenuSort(UINT nStatus);
	afx_msg void OnDictionaryURLLookup(UINT uID);
	afx_msg void OnTextGeneraterule();

#if 0
	afx_msg void OnRulefileMakephrases);
	afx_msg void OnTextAddexample();
	afx_msg void OnRulefileSortwords();
#endif
	DECLARE_MESSAGE_MAP()

// Interface Map
public:
	BEGIN_INTERFACE_PART(RichEditOleCallback, IRichEditOleCallback)
		INIT_INTERFACE_PART(CVisualTextView, RichEditOleCallback)
		STDMETHOD(GetNewStorage) (LPSTORAGE*);
		STDMETHOD(GetInPlaceContext) (LPOLEINPLACEFRAME*,
									  LPOLEINPLACEUIWINDOW*,
									  LPOLEINPLACEFRAMEINFO);
		STDMETHOD(ShowContainerUI) (BOOL);
		STDMETHOD(QueryInsertObject) (LPCLSID, LPSTORAGE, LONG);
		STDMETHOD(DeleteObject) (LPOLEOBJECT);
		STDMETHOD(QueryAcceptData) (LPDATAOBJECT, CLIPFORMAT*, DWORD,BOOL, HGLOBAL);
		STDMETHOD(ContextSensitiveHelp) (BOOL);
		STDMETHOD(GetClipboardData) (CHARRANGE*, DWORD, LPDATAOBJECT*);
		STDMETHOD(GetDragDropEffect) (BOOL, DWORD, LPDWORD);
		STDMETHOD(GetContextMenu) (WORD, LPOLEOBJECT, CHARRANGE*, HMENU*);
	END_INTERFACE_PART(RichEditOleCallback)

	DECLARE_INTERFACE_MAP()

public:
	BOOL m_bInsertMode;
	CStringArray m_strURLs;

private:
	CONCEPT *m_concept;
	HICON m_icon;
	CBitmap m_bitmap;
	CBitmap *m_dragBitmap;
	bool m_boolFirstTime;
	bool m_boolIsSampleFile;
	bool m_boolIsAutoGenerated;
	bool m_boolIsAnalyzed;
	CDC m_dragDC;
	CRect m_dragRect;
	int m_intCharWidth;
	int m_intLineHeight;
	TEXTMETRIC m_tm;
	DOC_TYPE m_docType;
	CURSOR_LINE_TYPE m_cursorLineType;
	BOOL m_bCutOp;
	CPtrArray m_UndoList;
	int m_IndexUndo;
	CHARRANGE m_crPre, m_crPost, m_cr2Pre, m_cr2Post; // Working Variables
	CString m_strPre, m_strPost; // Working Variables

public:
	void RemoveUndoList (void);
private:
	void AddToUndoList (CUndoItem *pItemAdd);
	void GetUndoParmsSelText(CString* pStr, CHARRANGE &cr, BOOL bPreAction=false, _TCHAR nChar=0);
	void AdjustUndoParms(CString* pStr, CHARRANGE &cr);
	bool GetCursorLine(CString &lineStr, int nth=-1);
	void OnFindBack();
	void OnFindForward();
	void LogFilePathStr(CString &logPathStr, CString &textPathStr);
	void TextAddExample(UINT menuID=0);
	void SelectText();
	void InitVars();
	void StringToTokens(CStringList &tokens, CString textStr);
	void GetWindowBitmap();
	void SetWindowBitmap();
	void DragLabel(CPoint point);
	void SortSelection();
	void InsertString(CString str);
	CString StandardizeLine(CString lineInStr, int &elementNum,int &bracketStatus, int ruleLineNum=-1);
	void InsertLine(CString str, int cursorPos=0);
	int IndentReturn(int lineOffset);
	bool GetWorkingText(CString &lineStr,long &lineIndex,long &selStart,long &selEnd, CString alertMsgStr);
	void SetAsModified();
	bool ApplyTabToSelection(bool shiftFlag=false);
	void ProcessFocus();
	void TextViewPopup(CPoint point);
	void LogPopup(CPoint point);
	void FindLocal();
	bool CalculateIsAnalyzed();
public:
	afx_msg void OnUpdateFileSave(CCmdUI *pCmdUI);
	afx_msg void OnUpdateSaveAll(CCmdUI *pCmdUI);
};

#ifndef _DEBUG  // debug version in VisualTextView.cpp
inline CVisualTextDoc* CVisualTextView::GetDocument()
   { return (CVisualTextDoc*)m_pDocument; }
#endif

/////////////////////////////////////////////////////////////////////////////

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_VISUALTEXTVIEW_H__5078BC9E_EEA1_11D2_A2C4_00105A99059F__INCLUDED_)
